Python can certainly be used for scalable back-end development, but its scalability is influenced by various factors such as the architecture of the application, the frameworks and tools used, and the performance optimization techniques applied.

Here are some key points to consider:

Application Architecture: A well-designed application architecture is crucial for scalability. This includes practices like using microservices or serverless architectures, which can scale different parts of an application independently.

Concurrency and Parallelism: Python's Global Interpreter Lock (GIL) can limit concurrency because it allows only one thread to execute Python bytecode at a time in a single process. However, this can be mitigated by using process-based parallelism (multiprocessing), asynchronous programming (asyncio), or by using a Python implementation that doesn't have a GIL, like Jython or IronPython. For web applications, frameworks like FastAPI or Tornado support asynchronous request handling which can improve performance.

Frameworks and Tools: Some Python frameworks are better suited for scalable applications than others. For example, Django and Flask are widely used for web development and have robust ecosystems. For high-performance applications, you might consider using a framework like FastAPI, which is designed for speed and supports asynchronous request handling.

Caching and Database Optimization: Using caching mechanisms can significantly increase the speed of your applications and reduce database load. Similarly, optimizing database queries and using database indexing can improve the performance of your applications.

Use of Python Extensions: Some Python extensions are written in languages like C or Cython and can execute tasks faster than standard Python. If certain parts of your application are particularly performance-critical, you might consider using such extensions.

Load Balancing: Load balancing across multiple servers can help to distribute the workload and improve the performance of your Python applications.

Use of a WSGI Server: Python web applications often use a WSGI (Web Server Gateway Interface) server like Gunicorn or uWSGI in conjunction with a reverse proxy like Nginx to improve concurrency and utilize resources better.

It's also worth mentioning that many large-scale applications and services use Python for their backend, including Instagram, Google, and Spotify, which is testament to Python's ability to scale when used properly.